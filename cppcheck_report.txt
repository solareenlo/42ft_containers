main.cpp:1529:13: style: Condition 'foo==bar' is always false [knownConditionTrueFalse]
    if (foo == bar) std::cout << "foo and bar are equal\n";
            ^
main.cpp:1530:13: style: Condition 'foo!=bar' is always true [knownConditionTrueFalse]
    if (foo != bar) std::cout << "foo and bar are not equal\n";
            ^
main.cpp:327:14: style: Redundant initialization for 'rit'. The initialized value is overwritten before it is read. [redundantInitialization]
    for (rit = v.rbegin(); rit != v.rend(); ++rit) *rit = ++i;
             ^
main.cpp:325:43: note: rit is initialized
    ft::vector<int>::reverse_iterator rit = v.rbegin();
                                          ^
main.cpp:327:14: note: rit is overwritten
    for (rit = v.rbegin(); rit != v.rend(); ++rit) *rit = ++i;
             ^
main.cpp:1150:14: style: Redundant initialization for 'rit'. The initialized value is overwritten before it is read. [redundantInitialization]
    for (rit = dq.rbegin(); rit != dq.rend(); ++rit) {
             ^
main.cpp:1148:42: note: rit is initialized
    ft::deque<int>::reverse_iterator rit = dq.rbegin();
                                         ^
main.cpp:1150:14: note: rit is overwritten
    for (rit = dq.rbegin(); rit != dq.rend(); ++rit) {
             ^
main.cpp:890:39: style: Local variable 'it' shadows outer variable [shadowVariable]
    for (ft::map<char, int>::iterator it = m.begin(); it != m.end(); ++it) {
                                      ^
main.cpp:886:34: note: Shadowed declaration
    ft::map<char, int>::iterator it;
                                 ^
main.cpp:890:39: note: Shadow variable
    for (ft::map<char, int>::iterator it = m.begin(); it != m.end(); ++it) {
                                      ^
main.cpp:895:39: style: Local variable 'it' shadows outer variable [shadowVariable]
    for (ft::map<char, int>::iterator it = m2.begin(); it != m2.end(); ++it) {
                                      ^
main.cpp:886:34: note: Shadowed declaration
    ft::map<char, int>::iterator it;
                                 ^
main.cpp:895:39: note: Shadow variable
    for (ft::map<char, int>::iterator it = m2.begin(); it != m2.end(); ++it) {
                                      ^
main.cpp:1705:31: style: Local variable 'mycomp' shadows outer function [shadowFunction]
    ft::set<int>::key_compare mycomp = se.key_comp();
                              ^
main.cpp:482:6: note: Shadowed declaration
bool mycomp(char c1, char c2) { return std::tolower(c1) < std::tolower(c2); }
     ^
main.cpp:1705:31: note: Shadow variable
    ft::set<int>::key_compare mycomp = se.key_comp();
                              ^
main.cpp:1721:33: style: Local variable 'mycomp' shadows outer function [shadowFunction]
    ft::set<int>::value_compare mycomp = se.value_comp();
                                ^
main.cpp:482:6: note: Shadowed declaration
bool mycomp(char c1, char c2) { return std::tolower(c1) < std::tolower(c2); }
     ^
main.cpp:1721:33: note: Shadow variable
    ft::set<int>::value_compare mycomp = se.value_comp();
                                ^
main.cpp:361:21: style: Unused variable: first [unusedVariable]
    ft::vector<int> first;
                    ^
main.cpp:748:17: style: Variable 'fourth['b']' is assigned a value that is never used. [unreadVariable]
    fourth['b'] = 30;
                ^
main.cpp:752:16: style: Variable 'fifth['d']' is assigned a value that is never used. [unreadVariable]
    fifth['d'] = 70;
               ^
stack.hpp:38:50: error: Reference to temporary returned. [returnTempReference]
    value_type&       top() { return m_ctnr_.back(); }
                                                 ^
stack.hpp:39:56: error: Reference to temporary returned. [returnTempReference]
    const value_type& top() const { return m_ctnr_.back(); }
                                                       ^
vector.hpp:234:41: warning:inconclusive: Member variable 'vector < int , std :: allocator < int > >::m_allocator_' is not assigned a value in 'vector < int , std :: allocator < int > >::operator='. [operatorEqVarError]
vector<T, Alloc>& ft::vector<T, Alloc>::operator=(const vector& x) {
                                        ^
tree.hpp:286:5: warning:inconclusive: Member variable 'tree < int , ft :: less < int > , std :: allocator < int > >::m_root_' is not initialized in the constructor. [uninitMemberVarPrivate]
    tree() {}
    ^
tree.hpp:286:5: warning:inconclusive: Member variable 'tree < int , ft :: less < int > , std :: allocator < int > >::NIL' is not initialized in the constructor. [uninitMemberVarPrivate]
    tree() {}
    ^
tree.hpp:286:5: warning:inconclusive: Member variable 'tree < int , ft :: less < int > , std :: allocator < int > >::m_begin_' is not initialized in the constructor. [uninitMemberVarPrivate]
    tree() {}
    ^
tree.hpp:286:5: warning:inconclusive: Member variable 'tree < int , ft :: less < int > , std :: allocator < int > >::m_end_' is not initialized in the constructor. [uninitMemberVarPrivate]
    tree() {}
    ^
tree.hpp:286:5: warning:inconclusive: Member variable 'tree < int , classcomp , std :: allocator < int > >::m_root_' is not initialized in the constructor. [uninitMemberVarPrivate]
    tree() {}
    ^
tree.hpp:286:5: warning:inconclusive: Member variable 'tree < int , classcomp , std :: allocator < int > >::NIL' is not initialized in the constructor. [uninitMemberVarPrivate]
    tree() {}
    ^
tree.hpp:286:5: warning:inconclusive: Member variable 'tree < int , classcomp , std :: allocator < int > >::m_begin_' is not initialized in the constructor. [uninitMemberVarPrivate]
    tree() {}
    ^
tree.hpp:286:5: warning:inconclusive: Member variable 'tree < int , classcomp , std :: allocator < int > >::m_end_' is not initialized in the constructor. [uninitMemberVarPrivate]
    tree() {}
    ^
tree.hpp:286:5: warning:inconclusive: Member variable 'tree < int , bool ( * ) ( int , int ) , std :: allocator < int > >::m_root_' is not initialized in the constructor. [uninitMemberVarPrivate]
    tree() {}
    ^
tree.hpp:286:5: warning:inconclusive: Member variable 'tree < int , bool ( * ) ( int , int ) , std :: allocator < int > >::NIL' is not initialized in the constructor. [uninitMemberVarPrivate]
    tree() {}
    ^
tree.hpp:286:5: warning:inconclusive: Member variable 'tree < int , bool ( * ) ( int , int ) , std :: allocator < int > >::m_begin_' is not initialized in the constructor. [uninitMemberVarPrivate]
    tree() {}
    ^
tree.hpp:286:5: warning:inconclusive: Member variable 'tree < int , bool ( * ) ( int , int ) , std :: allocator < int > >::m_end_' is not initialized in the constructor. [uninitMemberVarPrivate]
    tree() {}
    ^
tree.hpp:286:5: warning:inconclusive: Member variable 'tree < ft :: pair < const int , std :: string > , value_compare , std :: allocator < ft :: pair < const Key , std :: string > > >::m_root_' is not initialized in the constructor. [uninitMemberVarPrivate]
    tree() {}
    ^
tree.hpp:286:5: warning:inconclusive: Member variable 'tree < ft :: pair < const int , std :: string > , value_compare , std :: allocator < ft :: pair < const Key , std :: string > > >::NIL' is not initialized in the constructor. [uninitMemberVarPrivate]
    tree() {}
    ^
tree.hpp:286:5: warning:inconclusive: Member variable 'tree < ft :: pair < const int , std :: string > , value_compare , std :: allocator < ft :: pair < const Key , std :: string > > >::m_begin_' is not initialized in the constructor. [uninitMemberVarPrivate]
    tree() {}
    ^
tree.hpp:286:5: warning:inconclusive: Member variable 'tree < ft :: pair < const int , std :: string > , value_compare , std :: allocator < ft :: pair < const Key , std :: string > > >::m_end_' is not initialized in the constructor. [uninitMemberVarPrivate]
    tree() {}
    ^
tree.hpp:286:5: warning:inconclusive: Member variable 'tree < ft :: pair < const int , int > , value_compare , std :: allocator < ft :: pair < const Key , int > > >::m_root_' is not initialized in the constructor. [uninitMemberVarPrivate]
    tree() {}
    ^
tree.hpp:286:5: warning:inconclusive: Member variable 'tree < ft :: pair < const int , int > , value_compare , std :: allocator < ft :: pair < const Key , int > > >::NIL' is not initialized in the constructor. [uninitMemberVarPrivate]
    tree() {}
    ^
tree.hpp:286:5: warning:inconclusive: Member variable 'tree < ft :: pair < const int , int > , value_compare , std :: allocator < ft :: pair < const Key , int > > >::m_begin_' is not initialized in the constructor. [uninitMemberVarPrivate]
    tree() {}
    ^
tree.hpp:286:5: warning:inconclusive: Member variable 'tree < ft :: pair < const int , int > , value_compare , std :: allocator < ft :: pair < const Key , int > > >::m_end_' is not initialized in the constructor. [uninitMemberVarPrivate]
    tree() {}
    ^
tree.hpp:286:5: warning:inconclusive: Member variable 'tree < ft :: pair < const char , int > , value_compare , std :: allocator < ft :: pair < const Key , int > > >::m_root_' is not initialized in the constructor. [uninitMemberVarPrivate]
    tree() {}
    ^
tree.hpp:286:5: warning:inconclusive: Member variable 'tree < ft :: pair < const char , int > , value_compare , std :: allocator < ft :: pair < const Key , int > > >::NIL' is not initialized in the constructor. [uninitMemberVarPrivate]
    tree() {}
    ^
tree.hpp:286:5: warning:inconclusive: Member variable 'tree < ft :: pair < const char , int > , value_compare , std :: allocator < ft :: pair < const Key , int > > >::m_begin_' is not initialized in the constructor. [uninitMemberVarPrivate]
    tree() {}
    ^
tree.hpp:286:5: warning:inconclusive: Member variable 'tree < ft :: pair < const char , int > , value_compare , std :: allocator < ft :: pair < const Key , int > > >::m_end_' is not initialized in the constructor. [uninitMemberVarPrivate]
    tree() {}
    ^
tree.hpp:286:5: warning:inconclusive: Member variable 'tree < ft :: pair < const std :: string , char > , value_compare , std :: allocator < ft :: pair < const Key , char > > >::m_root_' is not initialized in the constructor. [uninitMemberVarPrivate]
    tree() {}
    ^
tree.hpp:286:5: warning:inconclusive: Member variable 'tree < ft :: pair < const std :: string , char > , value_compare , std :: allocator < ft :: pair < const Key , char > > >::NIL' is not initialized in the constructor. [uninitMemberVarPrivate]
    tree() {}
    ^
tree.hpp:286:5: warning:inconclusive: Member variable 'tree < ft :: pair < const std :: string , char > , value_compare , std :: allocator < ft :: pair < const Key , char > > >::m_begin_' is not initialized in the constructor. [uninitMemberVarPrivate]
    tree() {}
    ^
tree.hpp:286:5: warning:inconclusive: Member variable 'tree < ft :: pair < const std :: string , char > , value_compare , std :: allocator < ft :: pair < const Key , char > > >::m_end_' is not initialized in the constructor. [uninitMemberVarPrivate]
    tree() {}
    ^
tree.hpp:38:5: warning: Member variable 'node < int >::m_key_' is not initialized in the constructor. [uninitMemberVar]
    node()
    ^
main.cpp:62:10: style:inconclusive: Technically the member function 'Compare::operator()' can be const. [functionConst]
    bool operator()(int a, int b) { return (a == b); }
         ^
vector.hpp:109:28: style:inconclusive: Technically the member function 'vector < int , std :: allocator < int > >::front' can be const. [functionConst]
    reference              front();
                           ^
vector.hpp:367:56: note: Technically the member function 'vector < int , std :: allocator < int > >::front' can be const.
typename vector<T, Alloc>::reference vector<T, Alloc>::front() {
                                                       ^
vector.hpp:109:28: note: Technically the member function 'vector < int , std :: allocator < int > >::front' can be const.
    reference              front();
                           ^
vector.hpp:112:28: style:inconclusive: Technically the member function 'vector < int , std :: allocator < int > >::back' can be const. [functionConst]
    reference              back();
                           ^
vector.hpp:378:56: note: Technically the member function 'vector < int , std :: allocator < int > >::back' can be const.
typename vector<T, Alloc>::reference vector<T, Alloc>::back() {
                                                       ^
vector.hpp:112:28: note: Technically the member function 'vector < int , std :: allocator < int > >::back' can be const.
    reference              back();
                           ^
map.hpp:155:19: performance:inconclusive: Technically the member function 'map < char , int , bool ( * ) ( char , char ) , std :: allocator < ft :: pair < const Key , int > > >::value_comp' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    value_compare value_comp() const { return value_compare(m_key_compare_); }
                  ^
deque.hpp:279:28: style:inconclusive: Technically the member function 'deque < int , std :: allocator < int > >::begin' can be const. [functionConst]
    iterator               begin() { return m_start_; }
                           ^
deque.hpp:281:28: style:inconclusive: Technically the member function 'deque < int , std :: allocator < int > >::end' can be const. [functionConst]
    iterator               end() { return m_finish_; }
                           ^
deque.hpp:293:28: performance:inconclusive: Technically the member function 'deque < int , std :: allocator < int > >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    size_type              max_size() const;
                           ^
deque.hpp:519:54: note: Technically the member function 'deque < int , std :: allocator < int > >::max_size' can be static (but you may consider moving to unnamed namespace).
typename deque<T, Alloc>::size_type deque<T, Alloc>::max_size() const {
                                                     ^
deque.hpp:293:28: note: Technically the member function 'deque < int , std :: allocator < int > >::max_size' can be static (but you may consider moving to unnamed namespace).
    size_type              max_size() const;
                           ^
deque.hpp:302:28: style:inconclusive: Technically the member function 'deque < int , std :: allocator < int > >::front' can be const. [functionConst]
    reference              front() { return *m_start_; }
                           ^
deque.hpp:304:28: style:inconclusive: Technically the member function 'deque < int , std :: allocator < int > >::back' can be const. [functionConst]
    reference              back() { return *(m_finish_ - 1); }
                           ^
deque.hpp:279:28: style:inconclusive: Technically the member function 'deque < unsigned int , std :: allocator < int > >::begin' can be const. [functionConst]
    iterator               begin() { return m_start_; }
                           ^
deque.hpp:281:28: style:inconclusive: Technically the member function 'deque < unsigned int , std :: allocator < int > >::end' can be const. [functionConst]
    iterator               end() { return m_finish_; }
                           ^
deque.hpp:293:28: performance:inconclusive: Technically the member function 'deque < unsigned int , std :: allocator < int > >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    size_type              max_size() const;
                           ^
deque.hpp:519:54: note: Technically the member function 'deque < unsigned int , std :: allocator < int > >::max_size' can be static (but you may consider moving to unnamed namespace).
typename deque<T, Alloc>::size_type deque<T, Alloc>::max_size() const {
                                                     ^
deque.hpp:293:28: note: Technically the member function 'deque < unsigned int , std :: allocator < int > >::max_size' can be static (but you may consider moving to unnamed namespace).
    size_type              max_size() const;
                           ^
deque.hpp:302:28: style:inconclusive: Technically the member function 'deque < unsigned int , std :: allocator < int > >::front' can be const. [functionConst]
    reference              front() { return *m_start_; }
                           ^
deque.hpp:304:28: style:inconclusive: Technically the member function 'deque < unsigned int , std :: allocator < int > >::back' can be const. [functionConst]
    reference              back() { return *(m_finish_ - 1); }
                           ^
type_traits.hpp:32:37: style:inconclusive: Technically the member function 'integral_constant < bool , true >::operatorT' can be const. [functionConst]
                                    operator T() { return v; }
                                    ^
tree.hpp:240:14: style:inconclusive: Technically the member function 'const_tree_iterator < int >::operator++' can be const. [functionConst]
    iterator operator++(int) {
             ^
tree.hpp:249:14: style:inconclusive: Technically the member function 'const_tree_iterator < int >::operator--' can be const. [functionConst]
    iterator operator--(int) {
             ^
tree.hpp:240:14: style:inconclusive: Technically the member function 'const_tree_iterator < ft :: pair < const int , std :: string > >::operator++' can be const. [functionConst]
    iterator operator++(int) {
             ^
tree.hpp:249:14: style:inconclusive: Technically the member function 'const_tree_iterator < ft :: pair < const int , std :: string > >::operator--' can be const. [functionConst]
    iterator operator--(int) {
             ^
tree.hpp:240:14: style:inconclusive: Technically the member function 'const_tree_iterator < ft :: pair < const int , int > >::operator++' can be const. [functionConst]
    iterator operator++(int) {
             ^
tree.hpp:249:14: style:inconclusive: Technically the member function 'const_tree_iterator < ft :: pair < const int , int > >::operator--' can be const. [functionConst]
    iterator operator--(int) {
             ^
tree.hpp:240:14: style:inconclusive: Technically the member function 'const_tree_iterator < ft :: pair < const char , int > >::operator++' can be const. [functionConst]
    iterator operator++(int) {
             ^
tree.hpp:249:14: style:inconclusive: Technically the member function 'const_tree_iterator < ft :: pair < const char , int > >::operator--' can be const. [functionConst]
    iterator operator--(int) {
             ^
tree.hpp:240:14: style:inconclusive: Technically the member function 'const_tree_iterator < ft :: pair < const std :: string , char > >::operator++' can be const. [functionConst]
    iterator operator++(int) {
             ^
tree.hpp:249:14: style:inconclusive: Technically the member function 'const_tree_iterator < ft :: pair < const std :: string , char > >::operator--' can be const. [functionConst]
    iterator operator--(int) {
             ^
tree.hpp:189:14: style:inconclusive: Technically the member function 'tree_iterator < int >::operator++' can be const. [functionConst]
    iterator operator++(int) {
             ^
tree.hpp:198:14: style:inconclusive: Technically the member function 'tree_iterator < int >::operator--' can be const. [functionConst]
    iterator operator--(int) {
             ^
tree.hpp:189:14: style:inconclusive: Technically the member function 'tree_iterator < ft :: pair < const int , std :: string > >::operator++' can be const. [functionConst]
    iterator operator++(int) {
             ^
tree.hpp:198:14: style:inconclusive: Technically the member function 'tree_iterator < ft :: pair < const int , std :: string > >::operator--' can be const. [functionConst]
    iterator operator--(int) {
             ^
tree.hpp:189:14: style:inconclusive: Technically the member function 'tree_iterator < ft >::operator++' can be const. [functionConst]
    iterator operator++(int) {
             ^
tree.hpp:198:14: style:inconclusive: Technically the member function 'tree_iterator < ft >::operator--' can be const. [functionConst]
    iterator operator--(int) {
             ^
tree.hpp:189:14: style:inconclusive: Technically the member function 'tree_iterator < ft :: pair < const int , int > >::operator++' can be const. [functionConst]
    iterator operator++(int) {
             ^
tree.hpp:198:14: style:inconclusive: Technically the member function 'tree_iterator < ft :: pair < const int , int > >::operator--' can be const. [functionConst]
    iterator operator--(int) {
             ^
tree.hpp:189:14: style:inconclusive: Technically the member function 'tree_iterator < ft :: pair < const char , int > >::operator++' can be const. [functionConst]
    iterator operator++(int) {
             ^
tree.hpp:198:14: style:inconclusive: Technically the member function 'tree_iterator < ft :: pair < const char , int > >::operator--' can be const. [functionConst]
    iterator operator--(int) {
             ^
tree.hpp:189:14: style:inconclusive: Technically the member function 'tree_iterator < ft :: pair < const std :: string , char > >::operator++' can be const. [functionConst]
    iterator operator++(int) {
             ^
tree.hpp:198:14: style:inconclusive: Technically the member function 'tree_iterator < ft :: pair < const std :: string , char > >::operator--' can be const. [functionConst]
    iterator operator--(int) {
             ^
set.hpp:59:5: style: Class 'set < int , bool ( * ) ( int , int ) , std :: allocator < int > >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    set(InputIterator first, InputIterator last,
    ^
map.hpp:83:5: style: Class 'map < char , int , bool ( * ) ( char , char ) , std :: allocator < ft :: pair < const Key , int > > >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    map(InputIterator first, InputIterator last,
    ^
utility.hpp:32:5: style: Struct 'pair < int , int >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    pair(const pair<U, V>& pr) : first(pr.first), second(pr.second) {}
    ^
utility.hpp:32:5: style: Struct 'pair < std :: string , std :: string >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    pair(const pair<U, V>& pr) : first(pr.first), second(pr.second) {}
    ^
utility.hpp:32:5: style: Struct 'pair < int , char >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    pair(const pair<U, V>& pr) : first(pr.first), second(pr.second) {}
    ^
utility.hpp:32:5: style: Struct 'pair < std :: string , int >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    pair(const pair<U, V>& pr) : first(pr.first), second(pr.second) {}
    ^
utility.hpp:32:5: style: Struct 'pair < std :: string , double >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    pair(const pair<U, V>& pr) : first(pr.first), second(pr.second) {}
    ^
utility.hpp:32:5: style: Struct 'pair < ft :: map < char , int , ft :: less < Key > , std :: allocator < ft :: pair < const Key , int > > > :: iterator , bool >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    pair(const pair<U, V>& pr) : first(pr.first), second(pr.second) {}
    ^
utility.hpp:32:5: style: Struct 'pair < char , int >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    pair(const pair<U, V>& pr) : first(pr.first), second(pr.second) {}
    ^
utility.hpp:32:5: style: Struct 'pair < ft :: map < char , int , ft :: less < Key > , std :: allocator < ft :: pair < const Key , int > > > :: iterator , ft :: map < char , int , ft :: less < Key > , std :: allocator < ft :: pair < const Key , int > > > :: iterator >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    pair(const pair<U, V>& pr) : first(pr.first), second(pr.second) {}
    ^
utility.hpp:32:5: style: Struct 'pair < const char , int >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    pair(const pair<U, V>& pr) : first(pr.first), second(pr.second) {}
    ^
utility.hpp:32:5: style: Struct 'pair < ft :: set < int , ft :: less < int > , std :: allocator < int > > :: iterator , bool >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    pair(const pair<U, V>& pr) : first(pr.first), second(pr.second) {}
    ^
utility.hpp:32:5: style: Struct 'pair < ft :: set < int , ft :: less < int > , std :: allocator < int > > :: iterator , ft :: set < int , ft :: less < int > , std :: allocator < int > > :: iterator >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    pair(const pair<U, V>& pr) : first(pr.first), second(pr.second) {}
    ^
iterator.hpp:177:5: style: Class 'reverse_iterator < ft :: vector < int , std :: allocator < int > > :: iterator >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    reverse_iterator(const reverse_iterator<Iter>& rev_it)
    ^
iterator.hpp:177:5: style: Class 'reverse_iterator < ft :: map < int , std :: string , ft :: less < Key > , std :: allocator < ft :: pair < const Key , std :: string > > > :: iterator >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    reverse_iterator(const reverse_iterator<Iter>& rev_it)
    ^
deque.hpp:84:5: style: Class 'deque_iterator < int >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    deque_iterator(const iterator& src)
    ^
deque.hpp:84:5: style: Class 'deque_iterator < const int >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    deque_iterator(const iterator& src)
    ^
deque.hpp:84:5: style: Class 'deque_iterator < unsigned int >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    deque_iterator(const iterator& src)
    ^
deque.hpp:84:5: style: Class 'deque_iterator < const unsigned int >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    deque_iterator(const iterator& src)
    ^
deque.hpp:504:68: style:inconclusive: Function 'operator=' argument 1 names different: declaration 'x' definition 'rhs'. [funcArgNamesDifferent]
deque<T, Alloc>& deque<T, Alloc>::operator=(const deque<T, Alloc>& rhs) {
                                                                   ^
deque.hpp:276:51: note: Function 'operator=' argument 1 names different: declaration 'x' definition 'rhs'.
    deque&                 operator=(const deque& x);
                                                  ^
deque.hpp:504:68: note: Function 'operator=' argument 1 names different: declaration 'x' definition 'rhs'.
deque<T, Alloc>& deque<T, Alloc>::operator=(const deque<T, Alloc>& rhs) {
                                                                   ^
ori_test/main.cpp:87:27: warning: Return value of function vector_buffer.at() is not used. [ignoredReturnValue]
            vector_buffer.at(idx);
                          ^
ori_test/main.cpp:107:30: style: Variable 'copy' is assigned a value that is never used. [unreadVariable]
    { ft::map<int, int> copy = map_int; }
                             ^
iterator.hpp:177:5: style: Class 'reverse_iterator < ft :: random_access_iterator < int > >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    reverse_iterator(const reverse_iterator<Iter>& rev_it)
    ^
iterator.hpp:177:5: style: Class 'reverse_iterator < ft :: random_access_iterator < const int > >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    reverse_iterator(const reverse_iterator<Iter>& rev_it)
    ^
nofile:0:0: information: Cppcheck cannot find all the include files (use --check-config for details) [missingInclude]

